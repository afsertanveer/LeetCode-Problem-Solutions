/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int search(vector<int>& i, int left , int right, int val){
        for( int j = left  ; j <= right ; j++ ){
            if(i[j]==val) return j;
        }
        return -1;
    }
    TreeNode* helper(vector<int>& p, vector<int>& i,int& preIdx, int left, int right){
        if(left>right) return NULL ;
        
        TreeNode* root = new TreeNode(p[preIdx]);

        int inIdx = search(i,left,right,p[preIdx]);
        preIdx++;

        root->left = helper(p,i,preIdx,left,inIdx-1);
        root->right = helper(p,i,preIdx,inIdx+1,right);
        return root ;
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preIdx = 0 ;
        return helper(preorder,inorder,preIdx,0,inorder.size()-1);
    }
};